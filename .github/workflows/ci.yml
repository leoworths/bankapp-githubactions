#ci pipeline
name: CI Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: read
  security-events: write
jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Install dependencies
        run: mvn clean compile

#Unit Tests
  test:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Run unit tests
        run: mvn test
#security scan with trivy 
  security-check:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          ignore-unfixed: 'true'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
      - name: Upload SARIF report to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
#install gitleaks 
      - name: Install gitleaks
        run: |
          sudo apt install -y gitleaks
      - name: Run gitleaks
        run: gitleaks detect --source . -r gitleaks-report.json -f json
      - name: Upload gitleaks report to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report 
          path: gitleaks-report.json
#sonarqube scan
  sonarqube-scan:
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Run verify
        run: mvn clean verify
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=bankapp
            -Dsonar.projectName=bankapp
            -Dsonar.sources=src/main/java
            -Dsonar.tests=src/test/java
            -Dsonar.java.binaries=target/classes
            -Dsonar.java.test.binaries=target/test-classes
#Quality gate check status
      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
#build package
  build:
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Build project
        run: mvn clean package 
      - name: Upload Build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

#docker build and push to github container registry
  docker:
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_TAG: ${{ github.sha }}
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha, format=long
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

#Trivy Vulnerability Scanner 
      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-docker-results.sarif'
          severity: 'HIGH,CRITICAL'
      - name: Upload SARIF report to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-docker-results.sarif
#set output
      - name: Set output
        id: set_output
        run: |
          echo "image_tag=sha-${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
